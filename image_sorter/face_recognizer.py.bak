from .face_detector import FaceDetector

class FaceRecognizer():
    def __init__(self, image_filepath):
        self.image_filepath = image_filepath
        self.face_detector = FaceDetector([image_filepath])


    def recognize_faces(self, ):
        """
        Recognize the faces in the images using the available face encodings.
        """
        input_face_encodings = self.face_detector.get_face_encodings(image_filepath)

        recognized_faces = []
        unrecognized_faces_coordinates = []
        for bounding_box, unknown_encoding in zip(
            input_face_locations, input_face_encodings
        ):
            recognized_faces.append(_recognize_face(unknown_encoding))
            unrecognized_faces_coordinates.append(bounding_box)

        if unrecognized_faces_coordinates:
            logger.info(
                "Unrecognized %s face(s) detected in '%s'.",
                len(recognized_faces),
                image_filepath,
            )
        return recognized_faces



# def recognize_faces(image_filepath):
#     """Recognize the faces in the images using the available face encodings."""
#     input_face_locations, input_face_encodings = extract_face_encodings(image_filepath)

#     recognized_faces = []
#     unrecognized_faces_coordinates = []
#     for bounding_box, unknown_encoding in zip(
#         input_face_locations, input_face_encodings
#     ):
#         recognized_faces.append(_recognize_face(unknown_encoding))
#         unrecognized_faces_coordinates.append(bounding_box)

#     if unrecognized_faces_coordinates:
#         logger.info(
#             "Unrecognized %s face(s) detected in '%s'.",
#             len(recognized_faces),
#             image_filepath,
#         )
#     return recognized_faces


# def _recognize_face(unknown_encoding):
#     """Recognize the face in the images using the available face encodings."""
#     for face_encodings in get_face_encodings():
#         with Path(face_encodings).open(mode="rb") as f:
#             loaded_encodings = pickle.load(f)

#             boolean_matches = face_recognition.compare_faces(
#                 loaded_encodings["encodings"], unknown_encoding
#             )
#             votes = Counter(
#                 name
#                 for match, name in zip(boolean_matches, loaded_encodings["names"])
#                 if match
#             )
#             if votes:
#                 return votes.most_common(1)[0][0]
#             return UNKNOWN
